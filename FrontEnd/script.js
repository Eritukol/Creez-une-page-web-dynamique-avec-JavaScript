// const gallery = document.querySelector('.gallery');
// const filters = document.querySelector(".filters");
// const galleryModal = document.querySelector(".galleryModal");
// const adminToken = sessionStorage.getItem("token")

// async function main() {
//     displayWorks();
//     displayFilters();
//     Admin();
// }

// main();




// // Fonction pour affichage dynamiques des √©l√©ments

// async function displayWorks(categorieId) {

//     try {
//         const dataworks = await getWorks();
//         gallery.innerHTML = "";
//         galleryModal.innerHTML = "";
//         // Cr√©ation des projets pour l'affichage dans les galleries
//         dataworks.forEach((works) => {
//             if (categorieId == works.category.id || categorieId == null) {
//                 createWorks(works);
//                 createWorksModal(works);
//             }
//         });
//     } catch (error) {
//         console.log("Erreur lors de l'affichage des projets");
//     };
// };


// // Fonction d'appel API
// async function getWorks() {
//     try {
//         const worksResponse = await fetch("http://localhost:5678/api/works");
//         return worksResponse.json();
//     } catch (error) {
//         console.log("Erreur lors de la r√©cup√©ration des projets depuis l'API");
//     };
// };

// // Fonction pour cr√©er un projet dans la galerie
// function createWorks(works) {
//     const figure = document.createElement("figure");
//     const img = document.createElement("img");
//     const figcaption = document.createElement("figcaption");

//     img.src = works.imageUrl;
//     figcaption.innerText = works.title;
//     figure.setAttribute("categorieId", works.category.id);

//     figure.appendChild(img);
//     figure.appendChild(figcaption);
//     gallery.appendChild(figure);
// }


async function getWorks() {
    try {
        // üü¢ 1. On envoie une requ√™te GET √† l'API pour r√©cup√©rer les travaux
        const response = await fetch("http://localhost:5678/api/works");

        // üü¢ 2. On v√©rifie que la r√©ponse est OK (statut 200)
        if (!response.ok) {
            throw new Error(`Erreur HTTP : ${response.status}`);
        }

        // üü¢ 3. On transforme la r√©ponse en JSON (un tableau d'objets "work")
        const data = await response.json();

        // ‚úÖ 4. On affiche dans la console les donn√©es r√©cup√©r√©es
        console.log("Donn√©es r√©cup√©r√©es :", data);

        // ‚úÖ 5. On appelle la fonction qui affiche les travaux dans la galerie
        afficherGalerie(data);

    } catch (error) {
        // üî¥ Si une erreur survient (probl√®me r√©seau, serveur √©teint, etc.)
        console.error("Erreur lors de la r√©cup√©ration :", error);
    }
}

// On ex√©cute la fonction
getWorks();


// Fonction qui affiche les travaux dans la galerie
function afficherGalerie(works) {
    // S√©lectionne l'√©l√©ment avec la classe "gallery" (c'est l√† qu'on va ajouter les travaux)
    const gallery = document.querySelector(".gallery");

    // V√©rifie si l'√©l√©ment "gallery" existe dans le DOM
    if (!gallery) {  // Si gallery est null (n'existe pas), on affiche une erreur et on arr√™te la fonction
        console.error("Erreur : L'√©l√©ment .gallery n'existe pas dans le DOM !");
        return;  // On arr√™te la fonction ici si l'√©l√©ment n'existe pas
    }

    // Avant d'ajouter de nouveaux travaux √† la galerie, on vide d'abord le contenu actuel pour √©viter l'accumulation
    gallery.innerHTML = "";  // On vide l'√©l√©ment "gallery" (cela efface tous les anciens travaux, si pr√©sents)

    // La m√©thode forEach permet de parcourir tous les travaux (works)
    works.forEach(work => {
        // Pour chaque work, on cr√©e un √©l√©ment "article" pour l'afficher dans la galerie
        const article = document.createElement("article");

        // On cr√©e un √©l√©ment "img" pour afficher l'image du travail
        const image = document.createElement("img");
        image.src = work.imageUrl;  // On d√©finit la source de l'image (work.imageUrl contient l'URL de l'image)
        image.alt = work.title;  // On d√©finit l'attribut alt pour l'image avec le titre du travail

        // On cr√©e un √©l√©ment "h2" pour afficher le titre du travail
        const title = document.createElement("h3");
        title.innerText = work.title;  // On met le titre du travail dans l'√©l√©ment h3

        // On ajoute l'image et le titre √† l'article (ce sont les √©l√©ments visibles)
        article.appendChild(image);  // On ajoute l'image √† l'article
        article.appendChild(title);  // On ajoute le titre √† l'article

        // On ajoute l'article √† la galerie (cela l'affiche sur la page web)
        gallery.appendChild(article);
    });
}

